
(ns clojure.test-clojure.generated-functional-adapters-in-def
  (:use clojure.test)
  (:require [clojure.string :as str])
  (:import (clojure.test AdapterExerciser)))

  (deftest functional-adapters-in-def
           (def exerciser (AdapterExerciser.))
           (def Ladapter (fn [] (long 1)))
           (is (= (.methodL ^AdapterExerciser exerciser Ladapter) "L"))
           (def Iadapter (fn [] 1))
           (is (= (.methodI ^AdapterExerciser exerciser Iadapter) "I"))
           (def Sadapter (fn [] (short 1)))
           (is (= (.methodS ^AdapterExerciser exerciser Sadapter) "S"))
           (def Badapter (fn [] (byte 1)))
           (is (= (.methodB ^AdapterExerciser exerciser Badapter) "B"))
           (def Dadapter (fn [] (double 1)))
           (is (= (.methodD ^AdapterExerciser exerciser Dadapter) "D"))
           (def Fadapter (fn [] (float 1)))
           (is (= (.methodF ^AdapterExerciser exerciser Fadapter) "F"))
           (def Oadapter (fn [] exerciser))
           (is (= (.methodO ^AdapterExerciser exerciser Oadapter) "O"))
           (def LLadapter (fn [^long a] (long 1)))
           (is (= (.methodLL ^AdapterExerciser exerciser LLadapter) "LL"))
           (def DLadapter (fn [^double a] (long 1)))
           (is (= (.methodDL ^AdapterExerciser exerciser DLadapter) "DL"))
           (def OLadapter (fn [^AdapterExerciser a] (long 1)))
           (is (= (.methodOL ^AdapterExerciser exerciser OLadapter) "OL"))
           (def LIadapter (fn [^long a] 1))
           (is (= (.methodLI ^AdapterExerciser exerciser LIadapter) "LI"))
           (def DIadapter (fn [^double a] 1))
           (is (= (.methodDI ^AdapterExerciser exerciser DIadapter) "DI"))
           (def OIadapter (fn [^AdapterExerciser a] 1))
           (is (= (.methodOI ^AdapterExerciser exerciser OIadapter) "OI"))
           (def LSadapter (fn [^long a] (short 1)))
           (is (= (.methodLS ^AdapterExerciser exerciser LSadapter) "LS"))
           (def DSadapter (fn [^double a] (short 1)))
           (is (= (.methodDS ^AdapterExerciser exerciser DSadapter) "DS"))
           (def OSadapter (fn [^AdapterExerciser a] (short 1)))
           (is (= (.methodOS ^AdapterExerciser exerciser OSadapter) "OS"))
           (def LBadapter (fn [^long a] (byte 1)))
           (is (= (.methodLB ^AdapterExerciser exerciser LBadapter) "LB"))
           (def DBadapter (fn [^double a] (byte 1)))
           (is (= (.methodDB ^AdapterExerciser exerciser DBadapter) "DB"))
           (def OBadapter (fn [^AdapterExerciser a] (byte 1)))
           (is (= (.methodOB ^AdapterExerciser exerciser OBadapter) "OB"))
           (def LDadapter (fn [^long a] (double 1)))
           (is (= (.methodLD ^AdapterExerciser exerciser LDadapter) "LD"))
           (def DDadapter (fn [^double a] (double 1)))
           (is (= (.methodDD ^AdapterExerciser exerciser DDadapter) "DD"))
           (def ODadapter (fn [^AdapterExerciser a] (double 1)))
           (is (= (.methodOD ^AdapterExerciser exerciser ODadapter) "OD"))
           (def LFadapter (fn [^long a] (float 1)))
           (is (= (.methodLF ^AdapterExerciser exerciser LFadapter) "LF"))
           (def DFadapter (fn [^double a] (float 1)))
           (is (= (.methodDF ^AdapterExerciser exerciser DFadapter) "DF"))
           (def OFadapter (fn [^AdapterExerciser a] (float 1)))
           (is (= (.methodOF ^AdapterExerciser exerciser OFadapter) "OF"))
           (def LOadapter (fn [^long a] exerciser))
           (is (= (.methodLO ^AdapterExerciser exerciser LOadapter) "LO"))
           (def DOadapter (fn [^double a] exerciser))
           (is (= (.methodDO ^AdapterExerciser exerciser DOadapter) "DO"))
           (def OOadapter (fn [^AdapterExerciser a] exerciser))
           (is (= (.methodOO ^AdapterExerciser exerciser OOadapter) "OO"))
           (def LLLadapter (fn [^long a ^long b] (long 1)))
           (is (= (.methodLLL ^AdapterExerciser exerciser LLLadapter) "LLL"))
           (def LOLadapter (fn [^long a ^AdapterExerciser b] (long 1)))
           (is (= (.methodLOL ^AdapterExerciser exerciser LOLadapter) "LOL"))
           (def OLLadapter (fn [^AdapterExerciser a ^long b] (long 1)))
           (is (= (.methodOLL ^AdapterExerciser exerciser OLLadapter) "OLL"))
           (def DDLadapter (fn [^double a ^double b] (long 1)))
           (is (= (.methodDDL ^AdapterExerciser exerciser DDLadapter) "DDL"))
           (def LDLadapter (fn [^long a ^double b] (long 1)))
           (is (= (.methodLDL ^AdapterExerciser exerciser LDLadapter) "LDL"))
           (def DLLadapter (fn [^double a ^long b] (long 1)))
           (is (= (.methodDLL ^AdapterExerciser exerciser DLLadapter) "DLL"))
           (def OOLadapter (fn [^AdapterExerciser a ^AdapterExerciser b] (long 1)))
           (is (= (.methodOOL ^AdapterExerciser exerciser OOLadapter) "OOL"))
           (def ODLadapter (fn [^AdapterExerciser a ^double b] (long 1)))
           (is (= (.methodODL ^AdapterExerciser exerciser ODLadapter) "ODL"))
           (def DOLadapter (fn [^double a ^AdapterExerciser b] (long 1)))
           (is (= (.methodDOL ^AdapterExerciser exerciser DOLadapter) "DOL"))
           (def LLIadapter (fn [^long a ^long b] 1))
           (is (= (.methodLLI ^AdapterExerciser exerciser LLIadapter) "LLI"))
           (def LOIadapter (fn [^long a ^AdapterExerciser b] 1))
           (is (= (.methodLOI ^AdapterExerciser exerciser LOIadapter) "LOI"))
           (def OLIadapter (fn [^AdapterExerciser a ^long b] 1))
           (is (= (.methodOLI ^AdapterExerciser exerciser OLIadapter) "OLI"))
           (def DDIadapter (fn [^double a ^double b] 1))
           (is (= (.methodDDI ^AdapterExerciser exerciser DDIadapter) "DDI"))
           (def LDIadapter (fn [^long a ^double b] 1))
           (is (= (.methodLDI ^AdapterExerciser exerciser LDIadapter) "LDI"))
           (def DLIadapter (fn [^double a ^long b] 1))
           (is (= (.methodDLI ^AdapterExerciser exerciser DLIadapter) "DLI"))
           (def OOIadapter (fn [^AdapterExerciser a ^AdapterExerciser b] 1))
           (is (= (.methodOOI ^AdapterExerciser exerciser OOIadapter) "OOI"))
           (def ODIadapter (fn [^AdapterExerciser a ^double b] 1))
           (is (= (.methodODI ^AdapterExerciser exerciser ODIadapter) "ODI"))
           (def DOIadapter (fn [^double a ^AdapterExerciser b] 1))
           (is (= (.methodDOI ^AdapterExerciser exerciser DOIadapter) "DOI"))
           (def LLSadapter (fn [^long a ^long b] (short 1)))
           (is (= (.methodLLS ^AdapterExerciser exerciser LLSadapter) "LLS"))
           (def LOSadapter (fn [^long a ^AdapterExerciser b] (short 1)))
           (is (= (.methodLOS ^AdapterExerciser exerciser LOSadapter) "LOS"))
           (def OLSadapter (fn [^AdapterExerciser a ^long b] (short 1)))
           (is (= (.methodOLS ^AdapterExerciser exerciser OLSadapter) "OLS"))
           (def DDSadapter (fn [^double a ^double b] (short 1)))
           (is (= (.methodDDS ^AdapterExerciser exerciser DDSadapter) "DDS"))
           (def LDSadapter (fn [^long a ^double b] (short 1)))
           (is (= (.methodLDS ^AdapterExerciser exerciser LDSadapter) "LDS"))
           (def DLSadapter (fn [^double a ^long b] (short 1)))
           (is (= (.methodDLS ^AdapterExerciser exerciser DLSadapter) "DLS"))
           (def OOSadapter (fn [^AdapterExerciser a ^AdapterExerciser b] (short 1)))
           (is (= (.methodOOS ^AdapterExerciser exerciser OOSadapter) "OOS"))
           (def ODSadapter (fn [^AdapterExerciser a ^double b] (short 1)))
           (is (= (.methodODS ^AdapterExerciser exerciser ODSadapter) "ODS"))
           (def DOSadapter (fn [^double a ^AdapterExerciser b] (short 1)))
           (is (= (.methodDOS ^AdapterExerciser exerciser DOSadapter) "DOS"))
           (def LLBadapter (fn [^long a ^long b] (byte 1)))
           (is (= (.methodLLB ^AdapterExerciser exerciser LLBadapter) "LLB"))
           (def LOBadapter (fn [^long a ^AdapterExerciser b] (byte 1)))
           (is (= (.methodLOB ^AdapterExerciser exerciser LOBadapter) "LOB"))
           (def OLBadapter (fn [^AdapterExerciser a ^long b] (byte 1)))
           (is (= (.methodOLB ^AdapterExerciser exerciser OLBadapter) "OLB"))
           (def DDBadapter (fn [^double a ^double b] (byte 1)))
           (is (= (.methodDDB ^AdapterExerciser exerciser DDBadapter) "DDB"))
           (def LDBadapter (fn [^long a ^double b] (byte 1)))
           (is (= (.methodLDB ^AdapterExerciser exerciser LDBadapter) "LDB"))
           (def DLBadapter (fn [^double a ^long b] (byte 1)))
           (is (= (.methodDLB ^AdapterExerciser exerciser DLBadapter) "DLB"))
           (def OOBadapter (fn [^AdapterExerciser a ^AdapterExerciser b] (byte 1)))
           (is (= (.methodOOB ^AdapterExerciser exerciser OOBadapter) "OOB"))
           (def ODBadapter (fn [^AdapterExerciser a ^double b] (byte 1)))
           (is (= (.methodODB ^AdapterExerciser exerciser ODBadapter) "ODB"))
           (def DOBadapter (fn [^double a ^AdapterExerciser b] (byte 1)))
           (is (= (.methodDOB ^AdapterExerciser exerciser DOBadapter) "DOB"))
           (def LLDadapter (fn [^long a ^long b] (double 1)))
           (is (= (.methodLLD ^AdapterExerciser exerciser LLDadapter) "LLD"))
           (def LODadapter (fn [^long a ^AdapterExerciser b] (double 1)))
           (is (= (.methodLOD ^AdapterExerciser exerciser LODadapter) "LOD"))
           (def OLDadapter (fn [^AdapterExerciser a ^long b] (double 1)))
           (is (= (.methodOLD ^AdapterExerciser exerciser OLDadapter) "OLD"))
           (def DDDadapter (fn [^double a ^double b] (double 1)))
           (is (= (.methodDDD ^AdapterExerciser exerciser DDDadapter) "DDD"))
           (def LDDadapter (fn [^long a ^double b] (double 1)))
           (is (= (.methodLDD ^AdapterExerciser exerciser LDDadapter) "LDD"))
           (def DLDadapter (fn [^double a ^long b] (double 1)))
           (is (= (.methodDLD ^AdapterExerciser exerciser DLDadapter) "DLD"))
           (def OODadapter (fn [^AdapterExerciser a ^AdapterExerciser b] (double 1)))
           (is (= (.methodOOD ^AdapterExerciser exerciser OODadapter) "OOD"))
           (def ODDadapter (fn [^AdapterExerciser a ^double b] (double 1)))
           (is (= (.methodODD ^AdapterExerciser exerciser ODDadapter) "ODD"))
           (def DODadapter (fn [^double a ^AdapterExerciser b] (double 1)))
           (is (= (.methodDOD ^AdapterExerciser exerciser DODadapter) "DOD"))
           (def LLFadapter (fn [^long a ^long b] (float 1)))
           (is (= (.methodLLF ^AdapterExerciser exerciser LLFadapter) "LLF"))
           (def LOFadapter (fn [^long a ^AdapterExerciser b] (float 1)))
           (is (= (.methodLOF ^AdapterExerciser exerciser LOFadapter) "LOF"))
           (def OLFadapter (fn [^AdapterExerciser a ^long b] (float 1)))
           (is (= (.methodOLF ^AdapterExerciser exerciser OLFadapter) "OLF"))
           (def DDFadapter (fn [^double a ^double b] (float 1)))
           (is (= (.methodDDF ^AdapterExerciser exerciser DDFadapter) "DDF"))
           (def LDFadapter (fn [^long a ^double b] (float 1)))
           (is (= (.methodLDF ^AdapterExerciser exerciser LDFadapter) "LDF"))
           (def DLFadapter (fn [^double a ^long b] (float 1)))
           (is (= (.methodDLF ^AdapterExerciser exerciser DLFadapter) "DLF"))
           (def OOFadapter (fn [^AdapterExerciser a ^AdapterExerciser b] (float 1)))
           (is (= (.methodOOF ^AdapterExerciser exerciser OOFadapter) "OOF"))
           (def ODFadapter (fn [^AdapterExerciser a ^double b] (float 1)))
           (is (= (.methodODF ^AdapterExerciser exerciser ODFadapter) "ODF"))
           (def DOFadapter (fn [^double a ^AdapterExerciser b] (float 1)))
           (is (= (.methodDOF ^AdapterExerciser exerciser DOFadapter) "DOF"))
           (def LLOadapter (fn [^long a ^long b] exerciser))
           (is (= (.methodLLO ^AdapterExerciser exerciser LLOadapter) "LLO"))
           (def LOOadapter (fn [^long a ^AdapterExerciser b] exerciser))
           (is (= (.methodLOO ^AdapterExerciser exerciser LOOadapter) "LOO"))
           (def OLOadapter (fn [^AdapterExerciser a ^long b] exerciser))
           (is (= (.methodOLO ^AdapterExerciser exerciser OLOadapter) "OLO"))
           (def DDOadapter (fn [^double a ^double b] exerciser))
           (is (= (.methodDDO ^AdapterExerciser exerciser DDOadapter) "DDO"))
           (def LDOadapter (fn [^long a ^double b] exerciser))
           (is (= (.methodLDO ^AdapterExerciser exerciser LDOadapter) "LDO"))
           (def DLOadapter (fn [^double a ^long b] exerciser))
           (is (= (.methodDLO ^AdapterExerciser exerciser DLOadapter) "DLO"))
           (def OOOadapter (fn [^AdapterExerciser a ^AdapterExerciser b] exerciser))
           (is (= (.methodOOO ^AdapterExerciser exerciser OOOadapter) "OOO"))
           (def ODOadapter (fn [^AdapterExerciser a ^double b] exerciser))
           (is (= (.methodODO ^AdapterExerciser exerciser ODOadapter) "ODO"))
           (def DOOadapter (fn [^double a ^AdapterExerciser b] exerciser))
           (is (= (.methodDOO ^AdapterExerciser exerciser DOOadapter) "DOO"))
           (def OOOOadapter (fn [^AdapterExerciser a ^AdapterExerciser b ^AdapterExerciser c] exerciser))
           (is (= (.methodOOOO ^AdapterExerciser exerciser OOOOadapter) "OOOO"))
           (def OOOOOadapter (fn [^AdapterExerciser a ^AdapterExerciser b ^AdapterExerciser c ^AdapterExerciser d] exerciser))
           (is (= (.methodOOOOO ^AdapterExerciser exerciser OOOOOadapter) "OOOOO"))
           (def OOOOOOadapter (fn [^AdapterExerciser a ^AdapterExerciser b ^AdapterExerciser c ^AdapterExerciser d ^AdapterExerciser e] exerciser))
           (is (= (.methodOOOOOO ^AdapterExerciser exerciser OOOOOOadapter) "OOOOOO"))
           (def OOOOOOOadapter (fn [^AdapterExerciser a ^AdapterExerciser b ^AdapterExerciser c ^AdapterExerciser d ^AdapterExerciser e ^AdapterExerciser f] exerciser))
           (is (= (.methodOOOOOOO ^AdapterExerciser exerciser OOOOOOOadapter) "OOOOOOO"))
           (def OOOOOOOOadapter (fn [^AdapterExerciser a ^AdapterExerciser b ^AdapterExerciser c ^AdapterExerciser d ^AdapterExerciser e ^AdapterExerciser f ^AdapterExerciser g] exerciser))
           (is (= (.methodOOOOOOOO ^AdapterExerciser exerciser OOOOOOOOadapter) "OOOOOOOO"))
           (def OOOOOOOOOadapter (fn [^AdapterExerciser a ^AdapterExerciser b ^AdapterExerciser c ^AdapterExerciser d ^AdapterExerciser e ^AdapterExerciser f ^AdapterExerciser g ^AdapterExerciser h] exerciser))
           (is (= (.methodOOOOOOOOO ^AdapterExerciser exerciser OOOOOOOOOadapter) "OOOOOOOOO"))
           (def OOOOOOOOOOadapter (fn [^AdapterExerciser a ^AdapterExerciser b ^AdapterExerciser c ^AdapterExerciser d ^AdapterExerciser e ^AdapterExerciser f ^AdapterExerciser g ^AdapterExerciser h ^AdapterExerciser i] exerciser))
           (is (= (.methodOOOOOOOOOO ^AdapterExerciser exerciser OOOOOOOOOOadapter) "OOOOOOOOOO"))
           (def OOOOOOOOOOOadapter (fn [^AdapterExerciser a ^AdapterExerciser b ^AdapterExerciser c ^AdapterExerciser d ^AdapterExerciser e ^AdapterExerciser f ^AdapterExerciser g ^AdapterExerciser h ^AdapterExerciser i ^AdapterExerciser j] exerciser))
           (is (= (.methodOOOOOOOOOOO ^AdapterExerciser exerciser OOOOOOOOOOOadapter) "OOOOOOOOOOO")))